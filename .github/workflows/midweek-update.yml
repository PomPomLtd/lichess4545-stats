name: Mid-Week Stats Update

on:
  schedule:
    # Run every Thursday at 12:00 UTC (mid-week update)
    - cron: '0 12 * * 4'
  workflow_dispatch:
    inputs:
      season:
        description: 'Season number (defaults to current season)'
        required: false
        type: number
      round:
        description: 'Round number 1-8 (defaults to current round)'
        required: false
        type: number

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine season and round
        id: detect
        run: |
          # Default to current season (Season 46)
          SEASON="${{ github.event.inputs.season }}"
          if [ -z "$SEASON" ]; then
            SEASON=46
          fi
          echo "season=$SEASON" >> $GITHUB_OUTPUT

          # Auto-detect current round (highest existing round)
          ROUND="${{ github.event.inputs.round }}"
          if [ -z "$ROUND" ]; then
            # Find the highest existing round number (this is the current round)
            LATEST_ROUND=0
            for file in public/stats/season-${SEASON}-round-*.json; do
              if [ -f "$file" ]; then
                NUM=$(echo "$file" | grep -oP 'round-\K\d+')
                if [ "$NUM" -gt "$LATEST_ROUND" ]; then
                  LATEST_ROUND=$NUM
                fi
              fi
            done

            ROUND=$LATEST_ROUND

            if [ "$ROUND" -eq 0 ]; then
              echo "No existing rounds found for Season $SEASON"
              exit 0
            fi
          fi
          echo "round=$ROUND" >> $GITHUB_OUTPUT

          echo "Will update Season $SEASON Round $ROUND (mid-week)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          pip3 install python-chess

      - name: Download season games and PGNs
        id: download
        continue-on-error: true
        run: |
          SEASON="${{ steps.detect.outputs.season }}"
          ROUND="${{ steps.detect.outputs.round }}"

          echo "Fetching Season $SEASON data from Lichess 4545..."
          node scripts/fetch-lichess-season.js --season=$SEASON

          echo "Downloading Round $ROUND PGNs from Lichess.org..."
          node scripts/download-pgns.js --season=$SEASON --round=$ROUND

          if [ ! -f "data/season-${SEASON}-round-${ROUND}.pgn" ]; then
            echo "PGN file not found"
            echo "available=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "PGN file ready:"
          wc -l "data/season-${SEASON}-round-${ROUND}.pgn"
          echo "available=true" >> $GITHUB_OUTPUT

      - name: Generate Stats (No Stockfish)
        if: steps.download.outputs.available == 'true'
        run: |
          SEASON="${{ steps.detect.outputs.season }}"
          ROUND="${{ steps.detect.outputs.round }}"

          echo "Generating mid-week stats for Season $SEASON Round $ROUND"
          echo "Start time: $(date)"

          cat data/season-${SEASON}-round-${ROUND}.pgn | \
            node scripts/generate-stats.js \
              --round $ROUND \
              --season $SEASON

          echo "End time: $(date)"

      - name: Verify output
        if: steps.download.outputs.available == 'true'
        run: |
          SEASON="${{ steps.detect.outputs.season }}"
          ROUND="${{ steps.detect.outputs.round }}"
          OUTPUT_FILE="public/stats/season-${SEASON}-round-${ROUND}.json"

          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "Error: Stats file not generated at $OUTPUT_FILE"
            exit 1
          fi
          echo "Generated stats file:"
          ls -lh "$OUTPUT_FILE"
          echo "File size: $(du -h "$OUTPUT_FILE" | cut -f1)"

      - name: Commit and push results
        if: steps.download.outputs.available == 'true'
        run: |
          SEASON="${{ steps.detect.outputs.season }}"
          ROUND="${{ steps.detect.outputs.round }}"

          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add public/stats/season-${SEASON}-round-${ROUND}.json

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "$(cat <<EOF
          Update mid-week stats for Season $SEASON Round $ROUND

          Mid-week update with latest completed games
          Auto-generated by mid-week schedule
          EOF
          )"
            git pull --rebase
            git push
          fi

      - name: Summary
        if: always()
        run: |
          SEASON="${{ steps.detect.outputs.season }}"
          ROUND="${{ steps.detect.outputs.round }}"
          AVAILABLE="${{ steps.download.outputs.available }}"

          if [ "$AVAILABLE" = "true" ]; then
            echo "✅ Mid-week update complete for Season $SEASON Round $ROUND"
          else
            echo "⏸️  No data available for update"
          fi
